legend('topright', c('Innovation for Assistance Systems', 'Innovation for Communication Systems'),
col = c('red', 'blue'), pch = 15)
box()
barplot(as.matrix(data2), beside = T, col = c('red', 'blue'), ylim = c(0,95),
, xlab = 'Carmaker', ylab = 'Index Score')
legend('topright', c('Innovation for Assistance System', 'Innovation for Communication System'),
col = c('red', 'blue'), pch = 15)
box()
obs = 100
burn = 400
phi = 0.5
set.seed(3)
x = numeric(obs+burn)
x[1] = rnorm(1)
x = x[(burn+1):(burn+obs)]
ts.x = ts(x)
plot(ts.x, type = 'b', main = 'AR(1) Series', pch = 20, ylab = expression(x(t)))
x = x[(burn+1):(burn+obs)]
ts.x = ts(x)
plot(ts.x, type = 'b', main = 'AR(1) Series', pch = 20, ylab = expression(x(t)))
obs = 100
burn = 400
phi = 0.5
set.seed(3)
x = numeric(obs+burn)
x[1] = rnorm(1)
for(i in 2:(obs+burn)){
x[i] = phi*x[i-1] + rnorm(1)
}
x = x[(burn+1):(burn+obs)]
ts.x = ts(x)
plot(ts.x, type = 'b', main = 'AR(1) Series', pch = 20, ylab = expression(x(t)))
acf(ts.x, main = 'AR(1) ACF', ylim = c(-1,1))
pacf(ts.x, main = 'AR(1) PACF', ylim = c(-1,1))
phi = 0.01
x = numeric(obs+burn)
x[1] = rnorm(1)
for(i in 2:(obs+burn)){
x[i] = phi*x[i-1] + rnorm(1)
}
x = x[(burn+1):(burn+obs)]
ts.x = ts(x)
plot(ts.x, type = 'b', main = 'AR(1) Series', pch = 20, ylab = expression(x(t)))
acf(ts.x, main = 'AR(1) ACF', ylim = c(-1,1))
pacf(ts.x, main = 'AR(1) PACF', ylim = c(-1,1))
phi = -.7
set.seed(3)
# generate the sequence #
x = numeric(obs+burn)
x[1] = rnorm(1)
for(i in 2:(obs+burn)){
x[i] = phi*x[i-1] + rnorm(1)
}
x = x[(burn+1):(burn+obs)]
# ts object
ts.x = ts(x)
# plot
# Plot TS
plot(ts.x, type = 'b', main = 'AR(1) Series', pch = 20, ylab = expression(x(t)))
# Plot ACF
acf(ts.x, main = 'AR(1) ACF', ylim = c(-1,1))
# Plot PACF
pacf(ts.x, main = 'AR(1) PACF', ylim = c(-1,1))
ar1 = arima(ts.x, order = c(1,0,0))
print(ar1)
theta = 0.5
set.seed(3)
x = numeric(burn + obs)
eps = numeric(burn + obs)
eps[1] = rnorm(1)
x[i] = eps[i] + theta*eps[i-1]
x = numeric(burn + obs)
eps = numeric(burn + obs)
eps[1] = rnorm(1)
x[1] = eps[1]
for (i in 2:(burn + obs)){
eps[i] = rnorm(1)
x[i] = eps[i] + theta*eps[i-1]
}
x = x[(burn+1):(burn+obs)]
ts.x = ts(x)
plot(ts.x, type = 'b', main = 'MA(1) Series', pch = 20, ylab = expression(x(t)))
acf(ts.x, main = 'MA(1) ACF', ylim = c(-1,1))
pacf(ts.x, main = 'MA(1) PACF', ylim = c(-1,1))
x = numeric(burn + obs)
eps = numeric(burn + obs)
eps[1] = rnorm(1)
x[1] = eps[1]
for (i in 2:(burn + obs)){
eps[i] = rnorm(1)
x[i] = eps[i] + theta*eps[i-1]
}
x = x[(burn+1):(burn+obs)]
# ts object
ts.x = ts(x)
# plot
# Plot TS
plot(ts.x, type = 'b', main = 'MA(1) Series', pch = 20, ylab = expression(x(t)))
# Plot ACF
acf(ts.x, main = 'MA(1) ACF', ylim = c(-1,1))
# Plot PACF
pacf(ts.x, main = 'MA(1) PACF', ylim = c(-1,1))
ma1 = arima(ts.x, order = c(0,0,1))
print(ma1)
phi = 0.5
theta = 0.75
set.seed(3)
x = numeric(burn+obs)
eps = numeric(burn+obs)
eps[1] = rnorm(1)
x[1] = rnorm(1)
for(i in 2:(burn+obs)){
eps[i] = rnorm(1)
x[i] = phi*x[i-1] + eps[i] + theta*eps[i-1]
}
x = x[(burn+1):(burn+obs)]
# ts object
ts.x = ts(x)
# plot
# Plot TS
plot(ts.x, type = 'b', main = 'ARMA(1,1) Series', pch = 20, ylab = expression(x(t)))
# Plot ACF
acf(ts.x, main = 'ARMA(1,1) ACF', ylim = c(-1,1))
# Plot PACF
pacf(ts.x, main = 'ARMA(1,1) PACF', ylim = c(-1,1))
install.packages("stats4")
library("stats4", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
?mle
?pareto.fit
nLL = 2/(x*(1+(1/x)))
nLL = 2/(x*(1+(1/x))^3)
start = (1,2,3,4,5,6,7,8,9,10)
start = c(1,2,3,4,5,6,7,8,9,10)
mle(NLL, start)
nLL = function(2/(x*(1+(1/x))^3))
start = c(1,2,3,4,5,6,7,8,9,10)
mle(NLL, start)
nLL = function(2/(x*(1+(1/x))^3))
start = c(1,2,3,4,5,6,7,8,9,10)
mle(nLL, start)
nLL = function(x) {(2/(x*(1+(1/x))^3))}
start = c(1,2,3,4,5,6,7,8,9,10)
mle(nLL, start)
y = c(1,2,3,4,5,6,7,8,9,10)
mle(nLL, start = y)
mle(nLL)
name = function(pars,object){
declarations
logl = loglikelihood  function
return (-logl)
}
name = function(pars,object){
declarations
logl = loglikelihood  function
return (-logl)
}
pareto.lik = function(theta,y){
theta = theta[1]
n = nrow(y)
logl = nln(2) - nln(theta) - 3*sum(ln(1+(x/theta)))
n = nrow(y)
return(-logl)
}
pareto.like(c(theta), c(1,2,3,4,5,6,7,8,9))
pareto.lik(c(theta), c(1,2,3,4,5,6,7,8,9))
pareto.lik = function(theta,y){
theta = theta[1]
n = nrow(y)
logl = n*ln(2) - n*ln(theta) - 3*sum(ln(1+(x/theta)))
n = nrow(y)
return(-logl)
}
pareto.lik(c(theta), c(1,2,3,4,5,6,7,8,9))
pareto.lik = function(theta,y){
theta = theta[1]
n = nrow(y)
logl = n*log(2) - n*log(theta) - 3*sum(log(1+(x/theta)))
n = nrow(y)
return(-logl)
}
pareto.lik(c(theta), c(1,2,3,4,5,6,7,8,9))
pareto.lik = function(theta,y){
theta = theta
n = nrow(y)
logl = n*log(2) - n*log(theta) - 3*sum(log(1+(x/theta)))
n = nrow(y)
return(-logl)
}
pareto.lik(theta, c(1,2,3,4,5,6,7,8,9))
pareto.lik = function(x,y){
theta = x[1]
n = nrow(y)
logl = n*log(2) - n*log(theta) - 3*sum(log(1+(x/theta)))
n = nrow(y)
return(-logl)
}
pareto.lik(x, c(1,2,3,4,5,6,7,8,9))
logl = n*log(2) - n*log(theta) - 3*sum(log(1+(x/theta)))
pareto.lik = function(x,y){
theta = x[1]
n = nrow(y)
logl = n*log(2) - n*log(theta) - 3*sum(log(1+(x/theta)))
n = nrow(y)
return(-logl)
}
pareto.lik(x, c(1,2,3,4,5,6,7,8,9))
paretoLogLik = function(theta,data){
n = length(data)
logLik = n*log(2) - n*log(theta) - 3*sum(log(1+(x/theta)))
}
paretoLogLik(theta, c(1,2,3,4,5,6))
paretoLogLik(y, c(1,2,3,4,5,6))
paretoLogLik = function(theta,data){
n = length(data)
logLik = n*log(2) - n*log(theta) - 3*sum(log(1+(data/theta)))
}
paretoLogLik(y, c(1,2,3,4,5,6))
mle = optim(par = 1, fn = paretoLogLik, data = c(1,2,3,4,5), control = list(fnscale = -1))
mle = optim(par = 1, fn = paretoLogLik, data = c(1,2,3,4,5), control = list(fnscale = -1), method = Brent)
mle(paretoLogLik, start = list(theta = 1, data = c(1,2,3,4,5)), method = Brent)
mle(paretoLogLik, start = list(theta = 1, data = c(1,2,3,4,5)))
mle(paretoLogLik, start = list(theta = 1)
mle
mle(paretoLogLik, start = list(theta = 1)
mle
data = c(1,2,3,4,5,6)
n = length(data())
LL = function(theta){
return(n*log(2) - n*log(theta) - 3*sum(log(1+(data/theta))))
}
data = c(1,2,3,4,5,6)
n = length(data())
LL = function(theta){
R= suppressWarnings(n*log(2) - n*log(theta) - 3*sum(log(1+(data/theta))))
return(R)
}
mle(LL, start = list(theta = 1))
data = c(.85,1.08,0.35,3.28,1.24,2.58,0.02,0.13,0.22,0.52)
n = length(data)
LL = function(theta){
R= suppressWarnings(n*log(2) - n*log(theta) - 3*sum(log(1+(data/theta))))
return(R)
}
mle(LL, start = list(theta = 1))
nLL = 2/(x*(1+(1/x)))
data = c(.85,1.08,0.35,3.28,1.24,2.58,0.02,0.13,0.22,0.52)
n = length(data)
LL = function(theta){
R= suppressWarnings(n*log(2) - n*log(theta) - 3*sum(log(1+(data/theta))))
return(R)
}
mle(LL, start = list(theta = 1))
data = c(.85,1.08,0.35,3.28,1.24,2.58,0.02,0.13,0.22,0.52)
n = length(data)
LL = function(theta){
R= suppressWarnings(n*log(2) - n*log(theta) - 3*sum(log(1+(data/theta))))
return(R)
}
mle(LL, start = list(theta = 0))
mle(LL, start = list(theta = 0.01))
data = c(.85,1.08,0.35,3.28,1.24,2.58,0.02,0.13,0.22,0.52)
n = length(data)
LL = function(theta){
R= suppressWarnings(n*log(2) - n*log(theta) - 3*sum(log(1+(data/theta))))
return(R)
}
mle(LL, start = list(theta = 0.01))
data = c(.85,1.08,0.35,3.28,1.24,2.58,0.02,0.13,0.22,0.52)
n = length(data)
LL = function(theta,data){
R= suppressWarnings(n*log(2) - n*log(theta) - 3*sum(log(1+(data/theta))))
return(R)
}
mle(LL, start = list(theta = 0.01))
## STAT 5010 - CRASH COURSE IN TIME SERIES ##
# White Noise Model
# 100 observations
obs = 100
set.seed(3)
x = rnorm(100)
# this creates a time series object
ts.x = ts(x)
# Plot it + ACF + PACF
# Create layout for plots
layout(matrix(c(1,1,2,3),2,2,byrow = T))
# Plot TS
plot(ts.x, type = 'b', main = 'White Noise Series', pch = 20, ylab = expression(x(t)))
# Plot ACF
acf(ts.x, main = 'White Noise ACF', ylim = c(-1,1))
# Plot PACF
pacf(ts.x, main = 'White Noise PACF', ylim = c(-1,1))
## AR(1) Model ##
burn = 400
phi = 0.5
set.seed(3)
# generate the sequence #
x = numeric(obs+burn)
x[1] = rnorm(1)
for(i in 2:(obs+burn)){
x[i] = phi*x[i-1] + rnorm(1)
}
x = x[(burn+1):(burn+obs)]
# ts object
ts.x = ts(x)
# plot
# Plot TS
plot(ts.x, type = 'b', main = 'AR(1) Series', pch = 20, ylab = expression(x(t)))
# Plot ACF
acf(ts.x, main = 'AR(1) ACF', ylim = c(-1,1))
# Plot PACF
pacf(ts.x, main = 'AR(1) PACF', ylim = c(-1,1))
# Fitting the AR(1) to ts.x:
ar1 = arima(ts.x, order = c(1,0,0))
print(ar1)
# MA(1)
# same obs and burn as above
theta = 0.5
set.seed(3)
# generate the sequence
x = numeric(burn + obs)
eps = numeric(burn + obs)
eps[1] = rnorm(1)
x[1] = eps[1]
for (i in 2:(burn + obs)){
eps[i] = rnorm(1)
x[i] = eps[i] + theta*eps[i-1]
}
x = x[(burn+1):(burn+obs)]
# ts object
ts.x = ts(x)
# plot
# Plot TS
plot(ts.x, type = 'b', main = 'MA(1) Series', pch = 20, ylab = expression(x(t)))
# Plot ACF
acf(ts.x, main = 'MA(1) ACF', ylim = c(-1,1))
# Plot PACF
pacf(ts.x, main = 'MA(1) PACF', ylim = c(-1,1))
# fitting model
ma1 = arima(ts.x, order = c(0,0,1))
print(ma1)
# ARMA (1,1)
phi = 0.5
theta = 0.75
set.seed(3)
x = numeric(burn+obs)
eps = numeric(burn+obs)
eps[1] = rnorm(1)
x[1] = rnorm(1)
for(i in 2:(burn+obs)){
eps[i] = rnorm(1)
x[i] = phi*x[i-1] + eps[i] + theta*eps[i-1]
}
x = x[(burn+1):(burn+obs)]
# ts object
ts.x = ts(x)
# plot
# Plot TS
plot(ts.x, type = 'b', main = 'ARMA(1,1) Series', pch = 20, ylab = expression(x(t)))
# Plot ACF
acf(ts.x, main = 'ARMA(1,1) ACF', ylim = c(-1,1))
# Plot PACF
pacf(ts.x, main = 'ARMA(1,1) PACF', ylim = c(-1,1))
## FIT ARMA(1,1)
arma11 = arima(ts.x, order = c(1,0,1))
print(arma11)
t = length(ts.x)
fcast = 5
arma.pred = predict(arma11, n.ahead = fcast)
x.low = arma.pred$pred - 1.96*arma.pred$se
x.upp = arma.pred$pred + 1.96*arma.pred$se
plot((t-10):t, ts.x[(t-10):t], xlim = c(t-10, t+fcast), type = 'b',
main = 'ARMA(1,1) Forecast', ylab = expression (X(t)), xlab = 'Time',
ylim = c(min(x.low), max(x.upp)), pch = 20)
lines(arma.predict$pred, col = 'red', type = 'b', pch = 20)
lines(x.low, col = 'red', lty = 3)
lines(x.upp, col = 'red', lty = 3)
lines(c(t,t+1), c(ts.x[t], arma.pred$pred[1]), type = 'b', pch = 20, col = 1:2)
legend('topleft', c('Observed', 'Predicted', 'Prediction Interval'), col = c(1,2,2),
pch = c(20,20,-1), lty = c(-1,-1,3) )
# number to predict
fcast = 5
arma.pred = predict(arma11, n.ahead = fcast)
# Upper and Lower Confidence Intervals
x.low = arma.pred$pred - 1.96*arma.pred$se
x.upp = arma.pred$pred + 1.96*arma.pred$se
# Plot last 10 from series
plot((t-10):t, ts.x[(t-10):t], xlim = c(t-10, t+fcast), type = 'b',
main = 'ARMA(1,1) Forecast', ylab = expression (X(t)), xlab = 'Time',
ylim = c(min(x.low), max(x.upp)), pch = 20)
# Adding confidence limits
lines(arma.predict$pred, col = 'red', type = 'b', pch = 20)
lines(x.low, col = 'red', lty = 3)
lines(x.upp, col = 'red', lty = 3)
# Fix the gap
lines(c(t,t+1), c(ts.x[t], arma.pred$pred[1]), type = 'b', pch = 20, col = 1:2)
legend('topleft', c('Observed', 'Predicted', 'Prediction Interval'), col = c(1,2,2),
pch = c(20,20,-1), lty = c(-1,-1,3) )
# Prediction
# Suppose we want to predict we this ARMA (1,1) model
# length of series
t = length(ts.x)
# number to predict
fcast = 5
arma.pred = predict(arma11, n.ahead = fcast)
# Upper and Lower Confidence Intervals
x.low = arma.pred$pred - 1.96*arma.pred$se
x.upp = arma.pred$pred + 1.96*arma.pred$se
# Plot last 10 from series
plot((t-10):t, ts.x[(t-10):t], xlim = c(t-10, t+fcast), type = 'b',
main = 'ARMA(1,1) Forecast', ylab = expression (X(t)), xlab = 'Time',
ylim = c(min(x.low), max(x.upp)), pch = 20)
# Adding confidence limits
lines(arma.predict$pred, col = 'red', type = 'b', pch = 20)
lines(x.low, col = 'red', lty = 3)
lines(x.upp, col = 'red', lty = 3)
# Fix the gap
lines(c(t,t+1), c(ts.x[t], arma.pred$pred[1]), type = 'b', pch = 20, col = 1:2)
legend('topleft', c('Observed', 'Predicted', 'Prediction Interval'), col = c(1,2,2),
pch = c(20,20,-1), lty = c(-1,-1,3) )
write.csv(1:1000, file='test.csv')
file.pipe <- pipe("awk 'BEGIN{i=0}{i++;if (i%4==0) print $1}' < test.csv ")
res <- read.csv(file.pipe)
res
file.pipe
#-------------------------------------------------------------------------------
# Takes approximately 12 minutes to load 1000 subjects without reduction
#-------------------------------------------------------------------------------
rm(list = ls())
cat("\014")
# Load libraries and settings
library(dplyr)
library(ggplot2)
options(scipen=999)
# Needed variables
var_names <- c("skeleID", "isMainSkeleton", "distFromControl", "time",
"c_hips_x", "c_hips_y", "c_hips_z",
"head_x", "head_y", "head_z",
"l_shoulder_x", "l_shoulder_y", "l_shoulder_z",
"l_elbow_x", "l_elbow_y", "l_elbow_z",
"l_wrist_x", "l_wrist_y", "l_wrist_z",
"l_hand_x", "l_hand_y", "l_hand_z",
"r_shoulder_x", "r_shoulder_y", "r_shoulder_z",
"r_elbow_x", "r_elbow_y", "r_elbow_z",
"r_wrist_x", "r_wrist_y", "r_wrist_z",
"r_hand_x", "r_hand_y", "r_hand_z",
"l_hips_x", "l_hips_y", "l_hips_z",
"l_knee_x", "l_knee_y", "l_knee_z",
"l_ankle_x", "l_ankle_y", "l_ankle_z",
"r_hips_x", "r_hips_y", "r_hips_z",
"r_knee_x", "r_knee_y", "r_knee_z",
"r_ankle_x", "r_ankle_y", "r_ankle_z",
"c_shoulder_x", "c_shoulder_y", "c_shoulder_z")
file_names <- list.files(path = "data/2017-10_VSBData/",
pattern="*SkeleLog.csv")
getwd()
setwd("/Users/Rachel/Documents/GitHub/VSB-Project/data")
library(dplyr)
install.packages("dplyr")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
file_names <- list.files(path = "data/2017-10_VSBData/",
pattern="*SkeleLog.csv")
getwd()
setwd("/Users/Rachel/Documents/GitHub/VSB-Project")
getwd()
library(dplyr)
library(ggplot2)
options(scipen=999)
file_names <- list.files(path = "/data/2017-10_VSBData",
pattern="*SkeleLog.csv")
file_names
file_names <- list.files(path = "/data/2017-10_VSBData/",
pattern="*SkeleLog.csv")
paste0(getwd(), "data")
paste0(getwd(), "/data")
file_names <- list.files(path = paste0(getwd(), "/data", "/2017-10_VSBData"),
pattern="*SkeleLog.csv")
file_names
file_int <- file_skele <- list.files(path = paste0(getwd(), "/data", "/2017-10_VSBData"),
pattern="*EventLog.csv")
file_int
file_mini <- file_skele <- list.files(path = paste0(getwd(), "/data", "/2017-10_VSBData"),
pattern="*MiniGameLog.csv")
file_mini <- file_skele <- list.files(path = paste0(getwd(), "/data", "/2017-10_VSBData"),
pattern="*MinigameLog.csv")
file_skele <- list.files(path = paste0(getwd(), "/data", "/2017-10_VSBData"),
pattern="*SkeleLog.csv")
file_int <- list.files(path = paste0(getwd(), "/data", "/2017-10_VSBData"),
pattern="*EventLog.csv")
file_mini <- list.files(path = paste0(getwd(), "/data", "/2017-10_VSBData"),
pattern="*MinigameLog.csv")
file_skele <- list.files(path = paste0(getwd(), "/data", "/2017-10_VSBData"),
pattern="*SkeleLog.csv")
data_skele <- lapply(file_skele, function(i){
pipe(paste0("awk 'BEGIN{i=0}{i++;if (i%4==0) print $1}" < file_skele[i]))
})
file_skele
pipe(paste0("awk 'BEGIN{i=0}{i++;if (i%4==0) print $1}" < file_skele[i]))
data_skele <- lapply(file_skele, function(i){
pipe(paste0("awk 'BEGIN{i=0}{i++;if (i%4==0) print $1}" < file_skele[i]))
})
data_skele <- lapply(file_skele, function(i){
pipe(paste0("awk 'BEGIN{i=0}{i++;if (i%4==0) print $1}" < file_skele[i]))
tryCatch(read.csv(paste0("data/2017-10_VSVData/", i), skip = 5, header = F),
error = function(j){NULL})}) %>%
}
data_skele <- lapply(file_skele, function(i){
pipe(paste0("awk 'BEGIN{i=0}{i++;if (i%4==0) print $1}" < file_skele[i]))
tryCatch(read.csv(paste0("data/2017-10_VSVData/", i), skip = 5, header = F),
error = function(j){NULL})})
tryCatch(read.csv(paste0("data/2017-10_VSVData/", i), skip = 5, header = F),
error = function(j){NULL})}) %>%
}
